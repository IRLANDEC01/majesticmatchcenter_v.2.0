#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–∞–º –≤ S3
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ACL: 'public-read' –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

import { PutObjectAclCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';
import { s3Client } from '../src/lib/s3/client';
import { env } from '../src/lib/env/validation';

async function fixS3Permissions() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –≤ S3...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ bucket
    const listCommand = new ListObjectsV2Command({
      Bucket: env.S3_BUCKET,
    });
    
    const response = await s3Client.send(listCommand);
    
    if (!response.Contents || response.Contents.length === 0) {
      console.log('üìÇ Bucket –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å.');
      return;
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${response.Contents.length} —Ñ–∞–π–ª–æ–≤.`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º public-read ACL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    const promises = response.Contents.map(async (object) => {
      if (!object.Key) return;
      
      try {
        const aclCommand = new PutObjectAclCommand({
          Bucket: env.S3_BUCKET,
          Key: object.Key,
          ACL: 'public-read',
        });
        
        await s3Client.send(aclCommand);
        console.log(`‚úÖ ${object.Key}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${object.Key}:`, error);
      }
    });
    
    await Promise.all(promises);
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixS3Permissions()
  .then(() => {
    console.log('‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  }); 