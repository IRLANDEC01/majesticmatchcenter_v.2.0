'use client';

import React, { useState, useCallback } from 'react';
import { Button } from "@/shared/ui/button";
import { Input } from "@/shared/ui/input";
import { Plus, Search, X } from "lucide-react";
import { StatusFilter } from "@/shared/ui/status-filter";
import { usePermissions } from "@/shared/hooks/use-permissions";
import { useQueryClient } from '@tanstack/react-query';
import {
  MapTemplatesTable,
  MapTemplateDialog,
  useMapTemplatesQuery,
  useCreateMapTemplateMutation,
  useUpdateMapTemplateMutation,
  useArchiveMapTemplateMutation,
  useRestoreMapTemplateMutation,
  type MapTemplate,
} from "@/entities/map-templates";
import type { AdminRole, EntityStatus } from "@/shared/types/admin";
import type { MapTemplateFormValues } from '@/lib/api/schemas/map-templates/map-template-schemas';

interface MapTemplatesPageContentProps {
  userRole: AdminRole;
}

export function MapTemplatesPageContent({ userRole }: MapTemplatesPageContentProps) {
  const permissions = usePermissions(userRole);
  const queryClient = useQueryClient();
  
  // ‚úÖ –£–ü–†–û–©–ï–ù–û: –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π debounce (–æ–Ω —É–∂–µ –≤ useMapTemplatesQuery)
  const [searchTerm, setSearchTerm] = useState('');
  const [status, setStatus] = useState<EntityStatus>('active');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<MapTemplate | undefined>(undefined);
  
  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // ‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –ò—Å–ø–æ–ª—å–∑—É–µ–º TanStack Query —Ö—É–∫–∏ –≤–º–µ—Å—Ç–æ Server Actions
  const createMutation = useCreateMapTemplateMutation();
  const updateMutation = useUpdateMapTemplateMutation();
  const archiveMutation = useArchiveMapTemplateMutation();
  const restoreMutation = useRestoreMapTemplateMutation();

  // ‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
  const handleCreateAction = useCallback(async (data: MapTemplateFormValues) => {
    try {
      setFormErrors({}); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', data); // –û—Ç–ª–∞–¥–∫–∞
      const result = await createMutation.mutateAsync(data);
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –º—É—Ç–∞—Ü–∏–∏:', result); // –û—Ç–ª–∞–¥–∫–∞
      if (result.success) {
        setIsDialogOpen(false);
        setFormErrors({}); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        console.log('üö® –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', result.errors); // –û—Ç–ª–∞–¥–∫–∞
        setFormErrors(result.errors || {});
      }
      return result;
    } catch (error) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏/—Å–µ—Ä–≤–µ—Ä–∞
      console.error('üö® –û—à–∏–±–∫–∞ –≤ handleCreateAction:', error); // –û—Ç–ª–∞–¥–∫–∞
      setFormErrors({ general: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' });
      throw error;
    }
  }, [createMutation]);

  const handleUpdateAction = useCallback(async (id: string, data: MapTemplateFormValues) => {
    try {
      setFormErrors({}); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      const result = await updateMutation.mutateAsync({ id, data });
      if (result.success) {
        setIsDialogOpen(false);
        setSelectedTemplate(undefined);
        setFormErrors({}); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        setFormErrors(result.errors || {});
      }
      return result;
    } catch (error) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏/—Å–µ—Ä–≤–µ—Ä–∞
      setFormErrors({ general: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' });
      throw error;
    }
  }, [updateMutation]);

  const handleArchiveAction = useCallback(async (template: MapTemplate) => {
    await archiveMutation.mutateAsync(template.id);
    queryClient.invalidateQueries({
      predicate: (query) => query.queryKey[0] === 'mapTemplates'
    });
  }, [archiveMutation, queryClient]);

  const handleRestoreAction = useCallback(async (template: MapTemplate) => {
    await restoreMutation.mutateAsync(template.id);
    queryClient.invalidateQueries({
      predicate: (query) => query.queryKey[0] === 'mapTemplates'
    });
  }, [restoreMutation, queryClient]);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TanStack Query (debounce –≤–Ω—É—Ç—Ä–∏ —Ö—É–∫–∞)
  const { 
    data: templates = [], 
    isLoading, 
    error,
  } = useMapTemplatesQuery({
    searchTerm, // –ë–µ–∑ debounce - –æ–Ω –≤–Ω—É—Ç—Ä–∏ —Ö—É–∫–∞
    status,
    enabled: true,
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI
  const handleCreateClick = () => {
    setSelectedTemplate(undefined);
    setFormErrors({}); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    setIsDialogOpen(true);
  };

  const handleEditClick = (template: MapTemplate) => {
    setSelectedTemplate(template);
    setFormErrors({}); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    setIsDialogOpen(true);
  };

  const handleSearchClear = () => {
    setSearchTerm('');
  };

  // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –≤—Å–µ—Ö –º—É—Ç–∞—Ü–∏–π
  const isMutating = createMutation.isPending || 
                   updateMutation.isPending || 
                   archiveMutation.isPending || 
                   restoreMutation.isPending;

  return (
    <div className="container mx-auto py-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold">–®–∞–±–ª–æ–Ω—ã –∫–∞—Ä—Ç</h1>
          <p className="text-muted-foreground mt-1">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–∞—Ä—Ç –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
          </p>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex items-center justify-between gap-4 mb-6">
        {/* –ü–æ–∏—Å–∫ */}
        <div className="relative flex-1 max-w-md">
          <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <Search className="h-4 w-4 text-muted-foreground" />
          </div>
          <Input
            placeholder="–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞—Ä—Ç..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 pr-10"
          />
          {searchTerm && (
            <button
              type="button"
              onClick={handleSearchClear}
              className="absolute inset-y-0 right-0 flex cursor-pointer items-center rounded-r-md px-3 text-muted-foreground transition-colors hover:text-primary"
              aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
            >
              <X className="h-4 w-4" />
            </button>
          )}
        </div>

        {/* –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ */}
        <StatusFilter 
          value={status} 
          onChange={setStatus}
          canViewArchived={permissions.canViewArchived}
        />

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
        <Button 
          onClick={handleCreateClick}
          disabled={isMutating}
        >
          <Plus className="mr-2 h-4 w-4" />
          –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω
        </Button>
      </div>

      {/* ‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º—É—Ç–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ Server Actions */}
      <MapTemplatesTable
        templates={templates}
        isLoading={isLoading || isMutating}
        error={error}
        onEditAction={handleEditClick}
        searchTerm={searchTerm} // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π searchTerm –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        onArchiveAction={handleArchiveAction}
        onRestoreAction={handleRestoreAction}
      />

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {isDialogOpen && (
        <MapTemplateDialog
          isOpen={isDialogOpen}
          onClose={() => setIsDialogOpen(false)}
          onSubmit={async (data) => {
            const action = selectedTemplate
              ? () => handleUpdateAction(selectedTemplate.id, data)
              : () => handleCreateAction(data);
            
            const result = await action();
            
            if (result.success) {
              setIsDialogOpen(false);
            }
          }}
          template={selectedTemplate}
          isPending={isMutating}
        />
      )}
    </div>
  );
} 