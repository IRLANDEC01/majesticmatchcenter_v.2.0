'use server';

import { revalidatePath } from 'next/cache';
import { connectToDatabase } from '@/lib/db';
import mapTemplateService from '@/lib/domain/map-templates/map-template-service';
import { createMapTemplateApiSchema, updateMapTemplateApiSchema } from '@/lib/api/schemas/map-templates/map-template-schemas';
import { must } from '@/shared/lib/authorize';
import mongoose from 'mongoose';
import { auth } from '@/../auth';

// ‚úÖ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–û: –ï–¥–∏–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
export interface ActionResult {
  success: boolean;
  errors?: Record<string, string>;
}

/**
 * Server Action –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ä—Ç—ã
 * üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–û: –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ 'manageEntities'
 */
export const createMapTemplateAction = must('manageEntities')(
  async function (
    prevState: ActionResult,
    formData: FormData
  ): Promise<ActionResult> {
    try {
      // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      await connectToDatabase();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å Zod
      const validatedFields = createMapTemplateApiSchema.safeParse({
        name: formData.get('name'),
        image: formData.get('image'),
        description: formData.get('description'),
      });

      if (!validatedFields.success) {
        return {
          success: false,
          errors: validatedFields.error.flatten().fieldErrors as Record<string, string>,
        };
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
      const session = await auth();
      const adminId = new mongoose.Types.ObjectId(session!.user!.id);
      await mapTemplateService.createMapTemplate(validatedFields.data, adminId);

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
      revalidatePath('/admin/map-templates');

      return {
        success: true,
      };
    } catch (error: any) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ConflictError –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω
      if (error.name === 'ConflictError') {
        return {
          success: false,
          errors: { name: error.message },
        };
      }
      
      return {
        success: false,
        errors: { general: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞' },
      };
    }
  }
);

/**
 * Server Action –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ä—Ç—ã
 * üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–û: –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ 'manageEntities'
 */
export const updateMapTemplateAction = must('manageEntities')(
  async function (
    id: string,
    prevState: ActionResult,
    formData: FormData
  ): Promise<ActionResult> {
    try {
      // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      await connectToDatabase();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å Zod
      const validatedFields = updateMapTemplateApiSchema.safeParse({
        name: formData.get('name'),
        image: formData.get('image'),
        description: formData.get('description'),
      });

      if (!validatedFields.success) {
        return {
          success: false,
          errors: validatedFields.error.flatten().fieldErrors as Record<string, string>,
        };
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
      const session = await auth();
      const adminId = new mongoose.Types.ObjectId(session!.user!.id);
      await mapTemplateService.updateMapTemplate(id, validatedFields.data, adminId);

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
      revalidatePath('/admin/map-templates');
      revalidatePath(`/admin/map-templates/${id}`);

      return {
        success: true,
      };
    } catch (error: any) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ConflictError –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–µ–Ω
      if (error.name === 'ConflictError') {
        return {
          success: false,
          errors: { name: error.message },
        };
      }
      
      return {
        success: false,
        errors: { general: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞' },
      };
    }
  }
);

/**
 * Server Action –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ä—Ç—ã
 * üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–û: –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ 'manageEntities'
 * React 19: –ó–∞–º–µ–Ω—è–µ—Ç fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
 */
export const archiveMapTemplateAction = must('manageEntities')(
  async function (id: string): Promise<ActionResult> {
    try {
      // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      await connectToDatabase();

      const session = await auth();
      const adminId = new mongoose.Types.ObjectId(session!.user!.id);
      await mapTemplateService.archiveMapTemplate(id, adminId);
      
      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
      revalidatePath('/admin/map-templates');
      revalidatePath(`/admin/map-templates/${id}`);

      return { success: true };
    } catch (error: any) {
      return { 
        success: false, 
        errors: { general: error.message || '–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞' }
      };
    }
  }
);

/**
 * Server Action –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ä—Ç—ã
 * üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–û: –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ 'manageEntities'
 * React 19: –ó–∞–º–µ–Ω—è–µ—Ç fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ª–æ–≥–∏–∫—É
 */
export const restoreMapTemplateAction = must('manageEntities')(
  async function (id: string): Promise<ActionResult> {
    try {
      // ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
      await connectToDatabase();

      const session = await auth();
      const adminId = new mongoose.Types.ObjectId(session!.user!.id);
      await mapTemplateService.restoreMapTemplate(id, adminId);
      
      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
      revalidatePath('/admin/map-templates');
      revalidatePath(`/admin/map-templates/${id}`);

      return { success: true };
    } catch (error: any) {
      return { 
        success: false, 
        errors: { general: error.message || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞' }
      };
    }
  }
);