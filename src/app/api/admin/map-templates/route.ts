import { NextRequest, NextResponse } from 'next/server';
import { handleApiError } from '@/lib/api/handle-api-error.js';
import {
  GetMapTemplatesDto,
  getMapTemplatesSchema,
} from '@/lib/api/schemas/map-templates/map-template-schemas';
import mapTemplateService from '@/lib/domain/map-templates/map-template-service';
import { connectToDatabase } from '@/lib/db';
import { authorize } from '@/shared/lib/authorize';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞—Ä—Ç.
 * üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–û: –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–æ 'manageEntities'
 * @param {Request} request - –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å.
 * @returns {Promise<NextResponse>}
 */
export async function GET(request: NextRequest) {
  try {
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const authResult = await authorize('manageEntities');
    if (!authResult.success) {
      return authResult.response;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectToDatabase();
    
    const { searchParams } = new URL(request.url);
    const params: GetMapTemplatesDto = getMapTemplatesSchema.parse(
      Object.fromEntries(searchParams.entries())
    );

    const result = await mapTemplateService.getMapTemplates(params);
    return NextResponse.json(result);
  } catch (error) {
    return handleApiError(error instanceof Error ? error : new Error(String(error)));
  }
} 
