import { HydratedDocument, UpdateQuery } from 'mongoose';
import mapTemplateRepo, { IMapTemplateRepo } from '@/lib/repos/map-templates/map-template-repo';
import searchQueue from '@/queues/search-queue';
import searchService from '@/lib/domain/search/search-service';
import tournamentTemplateRepo from '@/lib/repos/tournament-templates/tournament-template-repo';
import { IMapTemplate } from '@/models/map/MapTemplate';
import { NotFoundError, ConflictError } from '@/lib/errors';
import { IFindParams, IFindResult } from '@/lib/repos/base-repo';
import { GetMapTemplatesDto, CreateMapTemplateDto, UpdateMapTemplateDto } from '@/lib/api/schemas/map-templates/map-template-schemas';
import * as cache from '@/lib/cache';
import { cacheKeys, cacheTags, cacheTtls } from '@/lib/cache/cache-policy';
import { getApiRedisClient } from '@/lib/redis-clients';
import { revalidateTag } from 'next/cache';

export interface IMapTemplateService {
  createMapTemplate(data: CreateMapTemplateDto): Promise<HydratedDocument<IMapTemplate>>;
  getMapTemplates(options: GetMapTemplatesDto): Promise<IFindResult<IMapTemplate>>;
  getMapTemplateById(id: string): Promise<HydratedDocument<IMapTemplate>>;
  updateMapTemplate(id: string, data: UpdateMapTemplateDto): Promise<HydratedDocument<IMapTemplate>>;
  archiveMapTemplate(id: string): Promise<HydratedDocument<IMapTemplate>>;
  restoreMapTemplate(id: string): Promise<HydratedDocument<IMapTemplate>>;
}

/**
 * C–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤ –∫–∞—Ä—Ç.
 */
class MapTemplateService implements IMapTemplateService {
  constructor(private repo: IMapTemplateRepo) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã.
   * @param {CreateMapTemplateDto} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.
   * @returns {Promise<HydratedDocument<IMapTemplate>>} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞ –∫–∞—Ä—Ç—ã.
   */
  async createMapTemplate(data: CreateMapTemplateDto): Promise<HydratedDocument<IMapTemplate>> {
    const existingTemplate = await this.repo.findOne({ name: data.name });
    if (existingTemplate) {
      throw new ConflictError(`–®–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã —Å –∏–º–µ–Ω–µ–º "${data.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º File –≤ placeholder URL (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
    const processedData: Omit<CreateMapTemplateDto, 'mapTemplateImage'> & { mapTemplateImage: string } = { 
      ...data,
      mapTemplateImage: typeof data.mapTemplateImage === 'string' ? data.mapTemplateImage : ''
    };
    
    if (data.mapTemplateImage instanceof File) {
      const placeholders = [
        'https://placehold.co/600x400/F4A261/E9C46A?text=Map+1',
        'https://placehold.co/600x400/2A9D8F/E9C46A?text=Map+2',
        'https://placehold.co/600x400/E76F51/E9C46A?text=Map+3',
        'https://placehold.co/600x400/264653/E9C46A?text=Map+4',
        'https://placehold.co/600x400/A8DADC/1D3557?text=Map+5',
      ];
      const randomIndex = Math.floor(Math.random() * placeholders.length);
      processedData.mapTemplateImage = placeholders[randomIndex];
    }

    const newTemplate = await this.repo.create(processedData);

    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ —Å–ø–∏—Å–∫–æ–≤
    await cache.incrementListRevision(cacheKeys.mapTemplatesRev());
    
    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è Next.js Data Cache –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    revalidateTag('map-templates:public');

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è
    try {
      await searchService.syncDocument('update', 'MapTemplate', newTemplate.id);
      console.log(`üîç [Search] –®–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã ${newTemplate.id} –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω`);
    } catch (error) {
      console.error(`‚ö†Ô∏è [Search] –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ ${newTemplate.id}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É–ø–∞–ª–∞
    }

    // –î—É–±–ª–∏—Ä—É—é—â–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π)
    const jobId = `map-template:${newTemplate.id}:v1`;
    await searchQueue.add('update', { entity: 'map-template', entityId: newTemplate.id }, { jobId });
    
    return newTemplate;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∫–∞—Ä—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
   * @param {GetMapTemplatesDto} options - –û–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
   * @returns {Promise<IFindResult<IMapTemplate>>}
   */
  async getMapTemplates(options: GetMapTemplatesDto): Promise<IFindResult<IMapTemplate>> {
    const { page, limit, q, status } = options;
    const redis = getApiRedisClient();

    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é —Å–ø–∏—Å–∫–∞
    const rev = await redis.get(cacheKeys.mapTemplatesRev()).then(Number).catch(() => 0) || 0;
    const key = cacheKeys.mapTemplatesList(page, limit, rev);
    const tags = [cacheTags.mapTemplatesList()];

    return cache.getOrSet(
      key,
      () => {
        // 2. Fetcher: —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ –∫—ç—à–∞
    const query: UpdateQuery<IMapTemplate> = {};
    if (q) {
      query.name = { $regex: q, $options: 'i' };
    }
        return this.repo.find({ query, page, limit, status });
      },
      cacheTtls.listShort,
      tags
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
   * @param {string} id - ID —à–∞–±–ª–æ–Ω–∞.
   * @returns {Promise<HydratedDocument<IMapTemplate>>} - –ù–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω.
   */
  async getMapTemplateById(id: string): Promise<HydratedDocument<IMapTemplate>> {
    const key = cacheKeys.mapTemplate(id);
    const tags = [cacheTags.mapTemplate(id), cacheTags.mapTemplatesList()];

    return cache.getOrSet(
      key,
      async () => {
    const template = await this.repo.findById(id);
    if (!template) {
      throw new NotFoundError(`–®–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    return template;
      },
      cacheTtls.entityMedium,
      tags
    );
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à.
   * @param {string} id - ID —à–∞–±–ª–æ–Ω–∞.
   * @param {UpdateMapTemplateDto} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
   * @returns {Promise<HydratedDocument<IMapTemplate>>} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.
   */
  async updateMapTemplate(id: string, data: UpdateMapTemplateDto): Promise<HydratedDocument<IMapTemplate>> {
    const templateToUpdate = await this.getMapTemplateById(id);

    if (data.name && data.name !== templateToUpdate.name) {
      const existingTemplate = await this.repo.findOne({ name: data.name });
      if (existingTemplate && existingTemplate.id.toString() !== id) {
        throw new ConflictError(`–®–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã —Å –∏–º–µ–Ω–µ–º "${data.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      }
    }
    
    Object.assign(templateToUpdate, data);
    
    const updatedTemplate = await this.repo.save(templateToUpdate);

    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
    await cache.invalidateByTags([cacheTags.mapTemplate(id), cacheTags.mapTemplatesList()]);
    await cache.incrementListRevision(cacheKeys.mapTemplatesRev());
    
    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è Next.js Data Cache
    revalidateTag('map-templates:public');
    revalidateTag(`map-template:${id}:public`);
    
    const jobId = `map-template:${updatedTemplate.id}:v1`;
    await searchQueue.add('update', { entity: 'map-template', entityId: updatedTemplate.id }, { jobId });
    return updatedTemplate;
  }

  /**
   * –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à.
   * @param {string} id - ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏.
   * @returns {Promise<HydratedDocument<IMapTemplate>>} - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω.
   */
  async archiveMapTemplate(id: string): Promise<HydratedDocument<IMapTemplate>> {
    const template = await this.repo.findById(id, { includeArchived: true });

    if (!template) {
      throw new NotFoundError(`–®–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã —Å ID ${id} –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    if (template.archivedAt) {
      throw new ConflictError('–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ.');
    }
    
    const archivedTemplate = await this.repo.archive(id);

    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
    await cache.invalidateByTags([cacheTags.mapTemplate(id), cacheTags.mapTemplatesList()]);
    await cache.incrementListRevision(cacheKeys.mapTemplatesRev());

    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è Next.js Data Cache
    revalidateTag('map-templates:public');
    revalidateTag(`map-template:${id}:public`);

    const jobId = `map-template:${archivedTemplate.id}:v1`;
    await searchQueue.add('update', { entity: 'map-template', entityId: archivedTemplate.id }, { jobId });
    return archivedTemplate;
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã –∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à.
   * @param {string} id - ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
   * @returns {Promise<HydratedDocument<IMapTemplate>>} - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω.
   */
  async restoreMapTemplate(id: string): Promise<HydratedDocument<IMapTemplate>> {
    const template = await this.repo.findById(id, { includeArchived: true });

    if (!template) {
      throw new NotFoundError(`–®–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã —Å ID ${id} –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    if (!template.archivedAt) {
      throw new ConflictError('–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ.');
    }

    const restoredTemplate = await this.repo.restore(id);
    
    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
    await cache.invalidateByTags([cacheTags.mapTemplate(id), cacheTags.mapTemplatesList()]);
    await cache.incrementListRevision(cacheKeys.mapTemplatesRev());

    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è Next.js Data Cache
    revalidateTag('map-templates:public');
    revalidateTag(`map-template:${id}:public`);

    const jobId = `map-template:${restoredTemplate.id}:v1`;
    await searchQueue.add('update', { entity: 'map-template', entityId: restoredTemplate.id }, { jobId });
    return restoredTemplate;
  }
}

const mapTemplateService = new MapTemplateService(mapTemplateRepo);
export default mapTemplateService; 