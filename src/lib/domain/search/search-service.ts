import { MeiliSearch, Task, EnqueuedTask } from 'meilisearch';
import { meilisearchConfig, MeiliIndexConfig } from '@/configs/meilisearch-config';
import mongoose from 'mongoose';
import searchQueue from '@/queues/search-queue';

interface LeanDocument {
  _id: mongoose.Types.ObjectId;
  [key: string]: any;
}

class SearchService {
  private client: MeiliSearch;

  constructor() {
    if (!process.env.MEILISEARCH_HOST || !process.env.MEILISEARCH_MASTER_KEY) {
      throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MeiliSearch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
    }

    this.client = new MeiliSearch({
      host: process.env.MEILISEARCH_HOST,
      apiKey: process.env.MEILISEARCH_MASTER_KEY,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
   */
  public async init(): Promise<void> {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SearchService...');
    try {
      const indexes = Object.values(meilisearchConfig) as MeiliIndexConfig[];
      for (const indexConfig of indexes) {
        const { indexName, primaryKey, filterableAttributes, sortableAttributes, searchableAttributes } = indexConfig;

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç. –£–∫–∞–∑—ã–≤–∞–µ–º primaryKey –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.
        await this.client.createIndex(indexName, { primaryKey });
        console.log(`–ò–Ω–¥–µ–∫—Å "${indexName}" –≥–æ—Ç–æ–≤.`);

        const index = this.client.index(indexName);

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. MeiliSearch –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.
        if (filterableAttributes) {
          await index.updateFilterableAttributes(filterableAttributes);
          console.log(`- –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è "${indexName}"`);
        }
        if (sortableAttributes) {
          await index.updateSortableAttributes(sortableAttributes);
          console.log(`- –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è "${indexName}"`);
        }
        if (searchableAttributes) {
          await index.updateSearchableAttributes(searchableAttributes);
          console.log(`- –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–∏—Å–∫–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è "${indexName}"`);
        }
      }
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SearchService —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SearchService:', error);
      // –í dev-—Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –µ–µ —É–≤–∏–¥–µ—Ç—å.
      // –í production –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.
      if (process.env.NODE_ENV !== 'production') {
        throw error;
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤—Å–µ—Ö —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.
   * –ü—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º –∏–∑ meilisearchConfig –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å.
   */
  public async reindexAll(): Promise<{ totalJobs: number }> {
    console.log('üîÑ [SearchService] –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...');
    let totalJobs = 0;

    const modelNames = Object.keys(meilisearchConfig);

    for (const modelNameKey of modelNames) {
      const config = meilisearchConfig[modelNameKey];
      // modelName - —ç—Ç–æ –∏–º—è –º–æ–¥–µ–ª–∏ Mongoose, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'MapTemplate'
      const modelName = config.modelName; 
      const model = mongoose.models[modelName];
      
      if (!model) {
        console.warn(`- [SearchService] –ú–æ–¥–µ–ª—å ${modelName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Mongoose. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
        continue;
      }
      
      console.log(`- [SearchService] –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ${modelName}...`);
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤–Ω—ã–µ
      const documents = await model.find({}).lean<LeanDocument[]>();
      
      const promises = documents.map(doc => {
        return searchQueue.add({
          action: 'update',
          entity: modelName,
          entityId: doc._id.toString(),
        });
      });

      await Promise.all(promises);
      totalJobs += documents.length;
      console.log(`- [SearchService] –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelName}.`);
    }
    
    console.log(`‚úÖ [SearchService] –í –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª–µ–Ω–æ ${totalJobs} –∑–∞–¥–∞—á –Ω–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é.`);
    return { totalJobs };
  }

  /**
   * –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ MeiliSearch.
   * –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.
   * @param indexName - –ò–º—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (e.g., 'players').
   */
  public async deleteIndex(indexName: string): Promise<EnqueuedTask> {
    console.log(`[SearchService] –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ "${indexName}"...`);
    try {
      const task = await this.client.deleteIndex(indexName);
      console.log(`[SearchService] –ó–∞–¥–∞—á–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ "${indexName}" —Å–æ–∑–¥–∞–Ω–∞ (Task UID: ${task.taskUid}).`);
      return task;
    } catch (error) {
      console.error(`[SearchService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ "${indexName}":`, error);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∏–Ω–¥–µ–∫—Å–∞–º.
   * @param query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
   * @param entities - –ú–∞—Å—Å–∏–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ (e.g., ['players', 'families']).
   */
  public async search(query: string, entities: string[]): Promise<any> {
    const searchQueries = entities
      .map(entityKey => {
        const indexConfig = meilisearchConfig[entityKey];
        if (!indexConfig) {
          console.warn(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ "${entityKey}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
          return null;
        }
        return { indexName: indexConfig.indexName, q: query };
      })
      .filter(Boolean);

    if (searchQueries.length === 0) {
      return { query, entities, results: {} };
    }

    const searchResults = await this.client.multiSearch({ queries: searchQueries as any });

    const formattedResults = searchResults.results.reduce((acc: Record<string, any>, result) => {
      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'mapTemplates') –ø–æ –∏–º–µ–Ω–∏ –∏–Ω–¥–µ–∫—Å–∞ ('map_templates')
      const entityKey = Object.keys(meilisearchConfig).find(
        key => meilisearchConfig[key].indexName === result.indexUid
      );
      if (entityKey) {
        acc[entityKey] = result.hits;
      }
      return acc;
    }, {});

    return { query, entities, results: formattedResults };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ë–î –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –µ–≥–æ –∫ –≤–∏–¥—É, –≥–æ—Ç–æ–≤–æ–º—É –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.
   * @param entityName - –ò–º—è –º–æ–¥–µ–ª–∏ (e.g., 'MapTemplate').
   * @param entityId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞.
   * @returns –ì–æ—Ç–æ–≤—ã–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ null, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
   * @private
   */
  private async _buildDocument(entityName: string, entityId: string): Promise<Record<string, any> | null> {
    const model = mongoose.models[entityName];
    if (!model) {
      throw new Error(`–ú–æ–¥–µ–ª—å "${entityName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Mongoose.`);
    }

    const doc = await model.findById(entityId).lean<LeanDocument>();
    if (!doc) {
      return null;
    }

    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞.
    return {
      id: doc._id.toString(),
      ...doc,
    };
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç) —Å MeiliSearch.
   * @param action - –î–µ–π—Å—Ç–≤–∏–µ: 'update' –∏–ª–∏ 'delete'.
   * @param entityName - –ò–º—è –º–æ–¥–µ–ª–∏.
   * @param entityId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞.
   */
  public async syncDocument(action: 'update' | 'delete', entityName: string, entityId: string): Promise<void> {
    const modelKey = entityName.toLowerCase() + 's'; // 'MapTemplate' -> 'maptemplates'
    const indexConfig = meilisearchConfig[modelKey];

    if (!indexConfig) {
      // –î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º.
      return;
    }

    const index = this.client.index(indexConfig.indexName);

    if (action === 'delete') {
      await index.deleteDocument(entityId);
      console.log(`[SearchService] –î–æ–∫—É–º–µ–Ω—Ç ${entityId} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ ${indexConfig.indexName}`);
      return;
    }

    // –î–ª—è action 'update'
    const documentPayload = await this._buildDocument(entityName, entityId);
    if (documentPayload) {
      await index.addDocuments([documentPayload], { primaryKey: 'id' });
      console.log(`[SearchService] –î–æ–∫—É–º–µ–Ω—Ç ${entityId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω–¥–µ–∫—Å–æ–º ${indexConfig.indexName}`);
    } else {
      // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
      await index.deleteDocument(entityId).catch(e => console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ${entityId} –∏–∑ –∏–Ω–¥–µ–∫—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —Ç–∞–º –∏ –Ω–µ –±—ã–ª–æ.`));
    }
  }
}

const searchService = new SearchService();
export default searchService; 