import 'server-only';
import { getApiRedisClient, isCacheDisabled } from '@/lib/redis-clients';
import { cacheKeys } from './cache-policy';

const redis = getApiRedisClient();

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ–µ Redis.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω "Cache-Aside".
 *
 * @template T –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∫—ç—à–∏—Ä—É—é—Ç—Å—è.
 * @param {string} key –ö–ª—é—á –¥–ª—è –∫—ç—à–∞.
 * @param {() => Promise<T>} fetcher –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ.
 * @param {number} ttl –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
 * @param {string[]} tags –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–ª—é—á–µ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
 * @returns {Promise<T>}
 */
export async function getOrSet<T>(
  key: string,
  fetcher: () => Promise<T>,
  ttl: number,
  tags: string[] = []
): Promise<T> {
  if (isCacheDisabled()) {
    return fetcher();
  }

  try {
    const cached = await redis.get(key);
    if (cached) {
      return JSON.parse(cached) as T;
    }

    const data = await fetcher();

    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (null/undefined)
    if (data === null || data === undefined) {
      return data;
    }

    const tx = redis.multi();
    tx.set(key, JSON.stringify(data), 'EX', ttl);
    if (tags.length > 0) {
      for (const tag of tags) {
        tx.sadd(tag, key);
      }
    }
    await tx.exec();

    return data;
  } catch (error) {
    console.error(`Cache Error (getOrSet for key: ${key}):`, error);
    // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∫—ç—à–∞ –æ—Ç–¥–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –∑–∞–ø—Ä–æ—Å
    return fetcher();
  }
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç (—É–¥–∞–ª—è–µ—Ç) –∫–ª—é—á–∏ –∫—ç—à–∞ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–µ–≥–∞–º.
 *
 * @param {string[]} tags –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
 * @returns {Promise<void>}
 */
export async function invalidateByTags(tags: string[]): Promise<void> {
  if (isCacheDisabled()) {
    return;
  }

  try {
    const keysToDelete: string[] = [];
    const pipeline = redis.pipeline();

    for (const tag of tags) {
      const keys = await redis.smembers(tag);
      if (keys.length > 0) {
        keysToDelete.push(...keys);
      }
      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∞–º —Ç–µ–≥
      pipeline.del(tag);
    }

    if (keysToDelete.length > 0) {
      pipeline.del(...[...new Set(keysToDelete)]); // –£–¥–∞–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
    }

    await pipeline.exec();
    if (process.env.NODE_ENV !== 'production') {
      console.log(`Cache invalidated for tags: [${tags.join(', ')}]. Keys deleted: ${keysToDelete.length}`);
    }
  } catch (error) {
    console.error(`Cache Error (invalidateByTags for tags: [${tags.join(', ')}]):`, error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  }
}

/**
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ä–µ–≤–∏–∑–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞.
 * –≠—Ç–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
 *
 * @param {keyof typeof cacheKeys} listRevKey –ö–ª—é—á –∏–∑ cacheKeys, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Å—á–µ—Ç—á–∏–∫ —Ä–µ–≤–∏–∑–∏–π (–Ω–∞–ø—Ä., 'mapTemplatesRev').
 * @returns {Promise<number>} –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞.
 */
export async function incrementListRevision(revKey: string): Promise<number> {
  if (isCacheDisabled()) {
    return Date.now(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–∞—Ö –∫—ç—à–∞
  }
  try {
    const newRev = await redis.incr(revKey);
    return newRev;
  } catch (error) {
    console.error(`Cache Error (incrementListRevision for key: ${revKey}):`, error);
    return Date.now();
  }
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç (—É–¥–∞–ª—è–µ—Ç) –æ–¥–∏–Ω –∫–ª—é—á –∏–∑ –∫—ç—à–∞.
 * @param {string} key –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 */
export async function invalidate(key: string): Promise<void> {
  if (isCacheDisabled()) {
    return;
  }
  try {
    await redis.del(key);
    if (process.env.NODE_ENV !== 'production') {
      console.log(`üßπ [Cache] –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á: ${key}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞ ${key}:`, error);
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å in-memory –∫—ç—à.
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ **—Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö**.
 */
export function clearMemoryCache(): void {
  if (process.env.NODE_ENV === 'test' && process.env.CACHE_DRIVER === 'memory') {
    (redis as any).flushall();
    console.log('üßπ [Cache] In-memory –∫—ç—à –æ—á–∏—â–µ–Ω.');
  }
} 