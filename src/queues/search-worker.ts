import { Worker, Job } from 'bullmq';
import searchService from '../lib/domain/search/search-service';
import { getBackgroundRedisClient } from '../lib/redis-clients';
import { connectToDatabase } from '../lib/db.js';

// –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Mongoose –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Ä–∫–µ—Ä–∞
import '../models/map/MapTemplate';
import '../models/tournament/TournamentTemplate';
import '../models/player/Player';
import '../models/family/Family';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é
interface SearchSyncJobData {
  entity: string;
  entityId: string;
}

// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é worker —Å —Ç–∏–ø–æ–º
let worker: Worker | null = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
async function initializeWorker() {
  try {
    await connectToDatabase();
    console.log('[SearchWorker] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
  } catch (error) {
    console.error('[SearchWorker] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
}

const redisClient = getBackgroundRedisClient();

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ 'search-sync'.
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏, –ø–æ—Å—Ç—É–ø–∞—é—â–µ–π –≤ –æ—á–µ—Ä–µ–¥—å.
 */
const processSearchSyncJob = async (job: Job<SearchSyncJobData>) => {
  // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–µ 'update' (–∏–ª–∏ 'delete' –≤ –±—É–¥—É—â–µ–º)
  const { entity, entityId } = job.data;
  const action = job.name as 'update' | 'delete';
  const jobDescription = `(Job ID: ${job.id}, Entity: ${entity}, ID: ${entityId}, Action: ${action})`;

  try {
    console.log(`[SearchWorker] üîÑ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ${jobDescription}`);

    await searchService.syncDocument(action, entity, entityId);

    console.log(`[SearchWorker] ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ${jobDescription}`);
  } catch (error) {
    console.error(`[SearchWorker] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ ${jobDescription}`, error);
    // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã BullMQ –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ
    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    throw error;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º worker —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
initializeWorker().then(() => {
worker = new Worker('search-sync', processSearchSyncJob, { 
  connection: redisClient,
  concurrency: 5, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ 5 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
});

worker.on('completed', job => {
  console.log(`[SearchWorker] Job ${job.id} has completed!`);
});

worker.on('failed', (job, err) => {
  console.log(`[SearchWorker] Job ${job?.id} has failed with ${err.message}`);
});

console.log('[SearchWorker] üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
}).catch(error => {
  console.error('[SearchWorker] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  process.exit(1);
});

export default worker; 